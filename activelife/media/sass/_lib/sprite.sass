/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$sp-cart-name: 'sp-cart'
$sp-cart-x: 30px
$sp-cart-y: 47px
$sp-cart-offset-x: -30px
$sp-cart-offset-y: -47px
$sp-cart-width: 31px
$sp-cart-height: 28px
$sp-cart-total-width: 77px
$sp-cart-total-height: 77px
$sp-cart-image: '../img/sprite.png'
$sp-cart: (30px, 47px, -30px, -47px, 31px, 28px, 77px, 77px, '../img/sprite.png', 'sp-cart', )
$sp-search-name: 'sp-search'
$sp-search-x: 47px
$sp-search-y: 0px
$sp-search-offset-x: -47px
$sp-search-offset-y: 0px
$sp-search-width: 30px
$sp-search-height: 30px
$sp-search-total-width: 77px
$sp-search-total-height: 77px
$sp-search-image: '../img/sprite.png'
$sp-search: (47px, 0px, -47px, 0px, 30px, 30px, 77px, 77px, '../img/sprite.png', 'sp-search', )
$sp-sign-name: 'sp-sign'
$sp-sign-x: 0px
$sp-sign-y: 47px
$sp-sign-offset-x: 0px
$sp-sign-offset-y: -47px
$sp-sign-width: 30px
$sp-sign-height: 30px
$sp-sign-total-width: 77px
$sp-sign-total-height: 77px
$sp-sign-image: '../img/sprite.png'
$sp-sign: (0px, 47px, 0px, -47px, 30px, 30px, 77px, 77px, '../img/sprite.png', 'sp-sign', )
$sp-zoom-name: 'sp-zoom'
$sp-zoom-x: 0px
$sp-zoom-y: 0px
$sp-zoom-offset-x: 0px
$sp-zoom-offset-y: 0px
$sp-zoom-width: 47px
$sp-zoom-height: 47px
$sp-zoom-total-width: 77px
$sp-zoom-total-height: 77px
$sp-zoom-image: '../img/sprite.png'
$sp-zoom: (0px, 0px, 0px, 0px, 47px, 47px, 77px, 77px, '../img/sprite.png', 'sp-zoom', )
$spritesheet-width: 77px
$spritesheet-height: 77px
$spritesheet-image: '../img/sprite.png'
$spritesheet-sprites: ($sp-cart, $sp-search, $sp-sign, $sp-zoom, )
$spritesheet: (77px, 77px, '../img/sprite.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
